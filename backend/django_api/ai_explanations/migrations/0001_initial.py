# Generated by Django 5.2.4 on 2025-07-27 19:00

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIExplanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_content', models.TextField()),
                ('content_type', models.CharField(help_text='Type of content (text, pdf, video, etc.)', max_length=50)),
                ('source_url', models.URLField(blank=True, null=True)),
                ('simplified_content', models.TextField()),
                ('difficulty_level', models.CharField(choices=[('elementary', 'Elementary'), ('middle_school', 'Middle School'), ('high_school', 'High School'), ('college', 'College'), ('expert', 'Expert')], max_length=20)),
                ('ai_model_used', models.CharField(help_text='AI model used for processing', max_length=100)),
                ('processing_time', models.FloatField(default=0.0, help_text='Processing time in seconds')),
                ('key_concepts', models.JSONField(default=list, help_text='List of key concepts extracted')),
                ('definitions', models.JSONField(default=dict, help_text='Dictionary of term definitions')),
                ('examples', models.JSONField(default=list, help_text='List of examples provided')),
                ('is_favorite', models.BooleanField(default=False)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_explanations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIProcessingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(help_text='Type of AI processing job', max_length=50)),
                ('input_data', models.JSONField(default=dict, help_text='Input data for processing')),
                ('output_data', models.JSONField(default=dict, help_text='Output data from processing')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('processing_time', models.FloatField(default=0.0)),
                ('model_used', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ai_processing_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('readability_score', models.FloatField(default=0.0, help_text='Flesch reading ease score')),
                ('complexity_score', models.FloatField(default=0.0, help_text='Text complexity score')),
                ('word_count', models.IntegerField(default=0)),
                ('sentence_count', models.IntegerField(default=0)),
                ('language_detected', models.CharField(default='en', max_length=10)),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment analysis score')),
                ('topics', models.JSONField(default=list, help_text='List of identified topics')),
                ('entities', models.JSONField(default=list, help_text='Named entities found')),
                ('keywords', models.JSONField(default=list, help_text='Key terms and phrases')),
                ('learning_objectives', models.JSONField(default=list, help_text='Identified learning objectives')),
                ('prerequisite_knowledge', models.JSONField(default=list, help_text='Required background knowledge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'content_analysis',
            },
        ),
        migrations.CreateModel(
            name='ExplanationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_content', models.TextField()),
                ('requested_difficulty', models.CharField(choices=[('elementary', 'Elementary'), ('middle_school', 'Middle School'), ('high_school', 'High School'), ('college', 'College'), ('expert', 'Expert')], max_length=20)),
                ('content_type', models.CharField(max_length=50)),
                ('simplified_content', models.TextField()),
                ('processing_time', models.FloatField(default=0.0)),
                ('ai_model_used', models.CharField(max_length=100)),
                ('user_rating', models.IntegerField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'explanation_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExplanationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('concept', 'Concept Explanation'), ('process', 'Process Description'), ('comparison', 'Comparison'), ('example', 'Example Generation'), ('summary', 'Summary')], max_length=20)),
                ('description', models.TextField()),
                ('prompt_template', models.TextField(help_text='AI prompt template')),
                ('output_format', models.JSONField(default=dict, help_text='Expected output format')),
                ('difficulty_levels', models.JSONField(default=list, help_text='Supported difficulty levels')),
                ('subjects', models.JSONField(default=list, help_text='Applicable subjects')),
                ('usage_count', models.IntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'explanation_templates',
                'ordering': ['-usage_count'],
            },
        ),
    ]
